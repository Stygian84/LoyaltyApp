// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: loyalty_prog.sql

package models

import (
	"context"
	"database/sql"
)

const createLoyalty = `-- name: CreateLoyalty :one
INSERT INTO loyalty_program(
  name, currency_name,processing_time,description,enrollment_link,
  terms_condition_link,format_regex,partner_code,initial_earn_rate
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, name, currency_name, processing_time, description, enrollment_link, terms_condition_link, format_regex, partner_code, initial_earn_rate
`

type CreateLoyaltyParams struct {
	Name               string         `json:"name"`
	CurrencyName       string         `json:"currency_name"`
	ProcessingTime     string         `json:"processing_time"`
	Description        sql.NullString `json:"description"`
	EnrollmentLink     string         `json:"enrollment_link"`
	TermsConditionLink string         `json:"terms_condition_link"`
	FormatRegex        string         `json:"format_regex"`
	PartnerCode        string         `json:"partner_code"`
	InitialEarnRate    float64        `json:"initial_earn_rate"`
}

func (q *Queries) CreateLoyalty(ctx context.Context, arg CreateLoyaltyParams) (LoyaltyProgram, error) {
	row := q.db.QueryRowContext(ctx, createLoyalty,
		arg.Name,
		arg.CurrencyName,
		arg.ProcessingTime,
		arg.Description,
		arg.EnrollmentLink,
		arg.TermsConditionLink,
		arg.FormatRegex,
		arg.PartnerCode,
		arg.InitialEarnRate,
	)
	var i LoyaltyProgram
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CurrencyName,
		&i.ProcessingTime,
		&i.Description,
		&i.EnrollmentLink,
		&i.TermsConditionLink,
		&i.FormatRegex,
		&i.PartnerCode,
		&i.InitialEarnRate,
	)
	return i, err
}

const deleteLoyalty = `-- name: DeleteLoyalty :exec
DELETE FROM loyalty_program
WHERE id = $1
`

func (q *Queries) DeleteLoyalty(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLoyalty, id)
	return err
}

const getLoyaltyByID = `-- name: GetLoyaltyByID :one
SELECT id, name, currency_name, processing_time, description, enrollment_link, terms_condition_link, format_regex, partner_code, initial_earn_rate FROM loyalty_program
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLoyaltyByID(ctx context.Context, id int64) (LoyaltyProgram, error) {
	row := q.db.QueryRowContext(ctx, getLoyaltyByID, id)
	var i LoyaltyProgram
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CurrencyName,
		&i.ProcessingTime,
		&i.Description,
		&i.EnrollmentLink,
		&i.TermsConditionLink,
		&i.FormatRegex,
		&i.PartnerCode,
		&i.InitialEarnRate,
	)
	return i, err
}

const getLoyaltyByName = `-- name: GetLoyaltyByName :one
SELECT id, name, currency_name, processing_time, description, enrollment_link, terms_condition_link, format_regex, partner_code, initial_earn_rate FROM loyalty_program
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetLoyaltyByName(ctx context.Context, name string) (LoyaltyProgram, error) {
	row := q.db.QueryRowContext(ctx, getLoyaltyByName, name)
	var i LoyaltyProgram
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CurrencyName,
		&i.ProcessingTime,
		&i.Description,
		&i.EnrollmentLink,
		&i.TermsConditionLink,
		&i.FormatRegex,
		&i.PartnerCode,
		&i.InitialEarnRate,
	)
	return i, err
}

const listLoyalty = `-- name: ListLoyalty :many
SELECT id, name, currency_name, processing_time, description, enrollment_link, terms_condition_link, format_regex, partner_code, initial_earn_rate FROM loyalty_program
ORDER BY name
`

func (q *Queries) ListLoyalty(ctx context.Context) ([]LoyaltyProgram, error) {
	rows, err := q.db.QueryContext(ctx, listLoyalty)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LoyaltyProgram
	for rows.Next() {
		var i LoyaltyProgram
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CurrencyName,
			&i.ProcessingTime,
			&i.Description,
			&i.EnrollmentLink,
			&i.TermsConditionLink,
			&i.FormatRegex,
			&i.PartnerCode,
			&i.InitialEarnRate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLoyalty = `-- name: UpdateLoyalty :one
UPDATE loyalty_program 
SET name = COALESCE($1,name),
currency_name = COALESCE($2,currency_name),
processing_time = COALESCE($3,processing_time),
description = COALESCE($4,description),
enrollment_link = COALESCE($5,enrollment_link),
terms_condition_link = COALESCE($6,terms_condition_link),
format_regex = COALESCE($7,format_regex),
partner_code = COALESCE($8,partner_code),
initial_earn_rate = COALESCE($9,initial_earn_rate)
WHERE id = $10
RETURNING id, name, currency_name, processing_time, description, enrollment_link, terms_condition_link, format_regex, partner_code, initial_earn_rate
`

type UpdateLoyaltyParams struct {
	Name               string         `json:"name"`
	CurrencyName       string         `json:"currency_name"`
	ProcessingTime     string         `json:"processing_time"`
	Description        sql.NullString `json:"description"`
	EnrollmentLink     string         `json:"enrollment_link"`
	TermsConditionLink string         `json:"terms_condition_link"`
	FormatRegex        string         `json:"format_regex"`
	PartnerCode        string         `json:"partner_code"`
	InitialEarnRate    float64        `json:"initial_earn_rate"`
	ID                 int64          `json:"id"`
}

func (q *Queries) UpdateLoyalty(ctx context.Context, arg UpdateLoyaltyParams) (LoyaltyProgram, error) {
	row := q.db.QueryRowContext(ctx, updateLoyalty,
		arg.Name,
		arg.CurrencyName,
		arg.ProcessingTime,
		arg.Description,
		arg.EnrollmentLink,
		arg.TermsConditionLink,
		arg.FormatRegex,
		arg.PartnerCode,
		arg.InitialEarnRate,
		arg.ID,
	)
	var i LoyaltyProgram
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CurrencyName,
		&i.ProcessingTime,
		&i.Description,
		&i.EnrollmentLink,
		&i.TermsConditionLink,
		&i.FormatRegex,
		&i.PartnerCode,
		&i.InitialEarnRate,
	)
	return i, err
}
