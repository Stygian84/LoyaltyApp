// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: card_tier.sql

package models

import (
	"context"
)

const createCardTier = `-- name: CreateCardTier :one
INSERT INTO card_tier(
  name,tier
) VALUES (
  $1, $2 
)
RETURNING id, name, tier
`

type CreateCardTierParams struct {
	Name string `json:"name"`
	Tier int32  `json:"tier"`
}

func (q *Queries) CreateCardTier(ctx context.Context, arg CreateCardTierParams) (CardTier, error) {
	row := q.db.QueryRowContext(ctx, createCardTier, arg.Name, arg.Tier)
	var i CardTier
	err := row.Scan(&i.ID, &i.Name, &i.Tier)
	return i, err
}

const deleteCardTier = `-- name: DeleteCardTier :exec
DELETE FROM card_tier
WHERE id = $1
`

func (q *Queries) DeleteCardTier(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCardTier, id)
	return err
}

const getCardTierByID = `-- name: GetCardTierByID :one
SELECT id, name, tier FROM card_tier
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCardTierByID(ctx context.Context, id int64) (CardTier, error) {
	row := q.db.QueryRowContext(ctx, getCardTierByID, id)
	var i CardTier
	err := row.Scan(&i.ID, &i.Name, &i.Tier)
	return i, err
}

const getCardTierByName = `-- name: GetCardTierByName :one
SELECT id, name, tier FROM card_tier
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCardTierByName(ctx context.Context, name string) (CardTier, error) {
	row := q.db.QueryRowContext(ctx, getCardTierByName, name)
	var i CardTier
	err := row.Scan(&i.ID, &i.Name, &i.Tier)
	return i, err
}

const listCardTier = `-- name: ListCardTier :many
SELECT id, name, tier FROM card_tier
ORDER BY name
`

func (q *Queries) ListCardTier(ctx context.Context) ([]CardTier, error) {
	rows, err := q.db.QueryContext(ctx, listCardTier)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CardTier
	for rows.Next() {
		var i CardTier
		if err := rows.Scan(&i.ID, &i.Name, &i.Tier); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCardTier = `-- name: UpdateCardTier :exec
UPDATE card_tier 
SET name = COALESCE($1,name)
WHERE id = $2
`

type UpdateCardTierParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateCardTier(ctx context.Context, arg UpdateCardTierParams) error {
	_, err := q.db.ExecContext(ctx, updateCardTier, arg.Name, arg.ID)
	return err
}
